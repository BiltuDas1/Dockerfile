name: "Docker Build & Publish"

on:
  workflow_dispatch:
    inputs:
      dockerfile_path:
        description: 'Path to the Dockerfile to use (e.g., docker/Dockerfile.dev)'
        required: true
      docker_image:
        description: 'Image:Tag name to publish (e.g., mxe:qt-static)'
        required: true
      add_latest_tag:
        description: 'Tag the image as latest'
        required: true
        type: boolean
        default: false
      run_docker:
        description: 'I confirm the details above are correct and wish to proceed'
        required: true
        type: boolean
        default: false

jobs:
  docker:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_docker }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        run: |
          if [ ! -f "${{ github.event.inputs.dockerfile_path }}" ]; then
            echo "ERROR: Dockerfile not found at '${{ github.event.inputs.dockerfile_path }}'"
            exit 1
          fi

      - name: Prepare Docker tags
        id: prep_tags
        run: |
          IMAGE_NAME=$(echo "${{ github.event.inputs.docker_image }}" | cut -d: -f1)

          {
            echo 'tags<<EOF'
            echo "${{ vars.DOCKERHUB_USERNAME }}/${{ github.event.inputs.docker_image }}"
            if [[ "${{ github.event.inputs.add_latest_tag }}" == "true" ]]; then
              echo "${{ vars.DOCKERHUB_USERNAME }}/$IMAGE_NAME:latest"
            fi
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ${{ github.event.inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.prep_tags.outputs.tags }}