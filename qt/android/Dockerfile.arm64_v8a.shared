# QT ARGUMENTS
ARG QT_VERSION=6.10.0
ARG QT_MAJOR_VERSION=6.10
ARG ANDROID_NDK_VERSION=27.3.13750724
ARG ANDROID_BUILD_TOOLS_VERSION=35.0.0
ARG ANDROID_PLATFORM=35


# Collecting Stage -->
FROM ubuntu:24.04 AS source

ARG QT_MAJOR_VERSION
ARG QT_VERSION

# INSTALLING DOWNLOADING TOOLS
RUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates tar unzip && \
    apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# DOWNLOADING QT SOURCE
RUN \
    wget https://download.qt.io/official_releases/qt/${QT_MAJOR_VERSION}/${QT_VERSION}/single/qt-everywhere-src-${QT_VERSION}.tar.xz && \
    tar -xf qt-everywhere-src-${QT_VERSION}.tar.xz && \
    rm qt-everywhere-src-${QT_VERSION}.tar.xz

# DOWNLOADING COMMAND-LINE TOOLS
ENV ANDROID_SDK_ROOT=/opt/android-sdk
RUN mkdir -p ${ANDROID_SDK_ROOT}/cmdline-tools && \
    toolsDownloadUrl=$(wget -qO- https://developer.android.com/studio | grep -o "https:\/\/dl.google.com\/android\/repository\/commandlinetools\-linux\-[0-9]*_latest\.zip") && \
    wget -q "$toolsDownloadUrl" -O /tmp/cmdline-tools.zip && \
    unzip -q /tmp/cmdline-tools.zip -d ${ANDROID_SDK_ROOT}/cmdline-tools && \
    mv ${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools ${ANDROID_SDK_ROOT}/cmdline-tools/latest && \
    rm /tmp/cmdline-tools.zip



# Building Stage --->
FROM ubuntu:24.04 AS builder

ARG QT_VERSION
ARG ANDROID_PLATFORM
ARG ANDROID_BUILD_TOOLS_VERSION
ARG ANDROID_NDK_VERSION

# INSTALL SYSTEM DEPENDENCIES
RUN \
    export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential ninja-build python3 perl git cmake \
    openjdk-17-jdk \
    # All development headers for Qt dependencies
    libgl1-mesa-dev libvulkan-dev libxkbcommon-x11-dev libxcb-icccm4-dev \
    libxcb-image0-dev libxcb-keysyms1-dev libxcb-render-util0-dev libxcb-xinerama0-dev \
    libxcb-randr0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-xfixes0-dev \
    libxcb-xkb-dev libfontconfig1-dev libfreetype6-dev libdbus-1-dev \
    libharfbuzz-dev libjpeg-dev libpng-dev libssl-dev libudev-dev \
    libinput-dev libsystemd-dev && \
    # Clean up
    apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# SETUP ANDROID ENVIRONMENTS
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}
ENV PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools

# ACCEPT LICENSES AND INSTALL SDK & NDK PACKAGES
COPY --from=source ${ANDROID_SDK_ROOT} ${ANDROID_SDK_ROOT}
RUN yes | sdkmanager --licenses && \
    sdkmanager "platform-tools" "platforms;android-${ANDROID_PLATFORM}" "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "ndk;${ANDROID_NDK_VERSION}"

# --- BUILD QT FOR ANDROID FROM SOURCE ---
ENV QT_DIR=/opt/Qt/${QT_VERSION}-android
COPY --from=source /qt-everywhere-src-${QT_VERSION} /tmp/qt-source
RUN \
    cd /tmp/qt-source && \
    ./configure \
    -prefix ${QT_DIR} -opensource -confirm-license -release \
    -xplatform android-clang \
    -android-sdk ${ANDROID_SDK_ROOT} \
    -android-ndk ${ANDROID_NDK_ROOT} \
    -android-abis arm64-v8a \
    -nomake examples -nomake tests -no-pch && \
    ninja && \
    ninja install && \
    rm -rf /tmp/qt-source



# Final Image ---->
FROM ubuntu:24.04 AS main

ARG ANDROID_NDK_VERSION
ARG QT_VERSION

# INSTALL ONLY RUNTIME DEPENDENCIES
RUN \
    export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && apt-get install -y --no-install-recommends \
    openjdk-17-jdk \
    git python3 libxcb-xinerama0 cmake && \
    # Clean up
    apt-get autoremove -y && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# SETUP ENVIRONMENT VARIABLES
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}
ENV QT_DIR=/opt/Qt/${QT_VERSION}-android
ENV PATH=${QT_DIR}/bin:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:$PATH

# COPY ARTIFACTS FROM THE BUILDER STAGE
COPY --from=builder ${ANDROID_SDK_ROOT} ${ANDROID_SDK_ROOT}
COPY --from=builder ${QT_DIR} ${QT_DIR}

WORKDIR /app
CMD ["/bin/bash"]